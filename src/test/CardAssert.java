package test;

import static java.lang.String.format;

import org.assertj.core.api.AbstractAssert;

/**
 * {@link Card} specific assertions - Generated by CustomAssertionGenerator.
 */
public class CardAssert extends AbstractAssert<CardAssert, main.Card> {

	/**
	 * Creates a new </code>{@link CardAssert}</code> to make assertions on actual Card.
	 * @param actual the Card we want to make assertions on.
	 */
	public CardAssert(main.Card actual) {
		super(actual, CardAssert.class);
	}

	/**
	 * An entry point for CardAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
	 * With a static import, one's can write directly : <code>assertThat(myCard)</code> and get specific assertion with code completion.
	 * @param actual the Card we want to make assertions on.
	 * @return a new </code>{@link CardAssert}</code>
	 */
	public static CardAssert assertThat(main.Card actual) {
		return new CardAssert(actual);
	}

	/**
	 * Verifies that the actual Card's colourValue is equal to the given one.
	 * @param colourValue the given colourValue to compare the actual Card's colourValue to.
	 * @return this assertion object.
	 * @throws AssertionError - if the actual Card's colourValue is not equal to the given one.
	 */
	public CardAssert hasColourValue(int colourValue) {
		// check that actual Card we want to make assertions on is not null.
		isNotNull();

		// we overrides the default error message with a more explicit one
		String errorMessage = format("\nExpected <%s> colourValue to be:\n  <%s>\n but was:\n  <%s>", actual,
				colourValue, actual.getColourValue());

		// check
		if (actual.getColourValue() != colourValue) {
			throw new AssertionError(errorMessage);
		}

		// return the current assertion for method chaining
		return this;
	}

	/**
	 * Verifies that the actual Card's figureValue is equal to the given one.
	 * @param figureValue the given figureValue to compare the actual Card's figureValue to.
	 * @return this assertion object.
	 * @throws AssertionError - if the actual Card's figureValue is not equal to the given one.
	 */
	public CardAssert hasFigureValue(int figureValue) {
		// check that actual Card we want to make assertions on is not null.
		isNotNull();

		// we overrides the default error message with a more explicit one
		String errorMessage = format("\nExpected <%s> figureValue to be:\n  <%s>\n but was:\n  <%s>", actual,
				figureValue, actual.getFigureValue());

		// check
		if (actual.getFigureValue() != figureValue) {
			throw new AssertionError(errorMessage);
		}

		// return the current assertion for method chaining
		return this;
	}

}
