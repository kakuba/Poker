package test;

import static java.lang.String.format;

import org.assertj.core.api.AbstractAssert;
import main.Card;
import main.Hand;

/**
 * {@link Hand} specific assertions - Generated by CustomAssertionGenerator.
 */
public class HandAssert extends AbstractAssert<HandAssert, Hand> {

	/**
	 * Creates a new </code>{@link HandAssert}</code> to make assertions on actual Hand.
	 * @param actual the Hand we want to make assertions on.
	 */
	public HandAssert(Hand actual) {
		super(actual, HandAssert.class);
	}

	/**
	 * An entry point for HandAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
	 * With a static import, one's can write directly : <code>assertThat(myHand)</code> and get specific assertion with code completion.
	 * @param actual the Hand we want to make assertions on.
	 * @return a new </code>{@link HandAssert}</code>
	 */
	public static HandAssert assertThat(Hand actual) {
		return new HandAssert(actual);
	}

	/**
	 * Verifies that the actual Hand's card1 is equal to the given one.
	 * @param card1 the given card1 to compare the actual Hand's card1 to.
	 * @return this assertion object.
	 * @throws AssertionError - if the actual Hand's card1 is not equal to the given one.
	 */
	public HandAssert hasCard1(Card card1) {
		// check that actual Hand we want to make assertions on is not null.
		isNotNull();

		// we overrides the default error message with a more explicit one
		String errorMessage = format("\nExpected <%s> card1 to be:\n  <%s>\n but was:\n  <%s>", actual, card1,
				actual.getCard1());

		// check
		if (!isEqual(actual.getCard1(), card1)) {
			throw new AssertionError(errorMessage);
		}

		// return the current assertion for method chaining
		return this;
	}

	/**
	 * Verifies that the actual Hand's card2 is equal to the given one.
	 * @param card2 the given card2 to compare the actual Hand's card2 to.
	 * @return this assertion object.
	 * @throws AssertionError - if the actual Hand's card2 is not equal to the given one.
	 */
	public HandAssert hasCard2(Card card2) {
		// check that actual Hand we want to make assertions on is not null.
		isNotNull();

		// we overrides the default error message with a more explicit one
		String errorMessage = format("\nExpected <%s> card2 to be:\n  <%s>\n but was:\n  <%s>", actual, card2,
				actual.getCard2());

		// check
		if (!isEqual(actual.getCard2(), card2)) {
			throw new AssertionError(errorMessage);
		}

		// return the current assertion for method chaining
		return this;
	}

	/**
	 * Verifies that the actual Hand's card3 is equal to the given one.
	 * @param card3 the given card3 to compare the actual Hand's card3 to.
	 * @return this assertion object.
	 * @throws AssertionError - if the actual Hand's card3 is not equal to the given one.
	 */
	public HandAssert hasCard3(Card card3) {
		// check that actual Hand we want to make assertions on is not null.
		isNotNull();

		// we overrides the default error message with a more explicit one
		String errorMessage = format("\nExpected <%s> card3 to be:\n  <%s>\n but was:\n  <%s>", actual, card3,
				actual.getCard3());

		// check
		if (!isEqual(actual.getCard3(), card3)) {
			throw new AssertionError(errorMessage);
		}

		// return the current assertion for method chaining
		return this;
	}

	/**
	 * Verifies that the actual Hand's card4 is equal to the given one.
	 * @param card4 the given card4 to compare the actual Hand's card4 to.
	 * @return this assertion object.
	 * @throws AssertionError - if the actual Hand's card4 is not equal to the given one.
	 */
	public HandAssert hasCard4(Card card4) {
		// check that actual Hand we want to make assertions on is not null.
		isNotNull();

		// we overrides the default error message with a more explicit one
		String errorMessage = format("\nExpected <%s> card4 to be:\n  <%s>\n but was:\n  <%s>", actual, card4,
				actual.getCard4());

		// check
		if (!isEqual(actual.getCard4(), card4)) {
			throw new AssertionError(errorMessage);
		}

		// return the current assertion for method chaining
		return this;
	}

	/**
	 * Verifies that the actual Hand's card5 is equal to the given one.
	 * @param card5 the given card5 to compare the actual Hand's card5 to.
	 * @return this assertion object.
	 * @throws AssertionError - if the actual Hand's card5 is not equal to the given one.
	 */
	public HandAssert hasCard5(Card card5) {
		// check that actual Hand we want to make assertions on is not null.
		isNotNull();

		// we overrides the default error message with a more explicit one
		String errorMessage = format("\nExpected <%s> card5 to be:\n  <%s>\n but was:\n  <%s>", actual, card5,
				actual.getCard5());

		// check
		if (!isEqual(actual.getCard5(), card5)) {
			throw new AssertionError(errorMessage);
		}

		// return the current assertion for method chaining
		return this;
	}

	/**
	 * Verifies that the actual Hand is sameColour.
	 * @return this assertion object.
	 * @throws AssertionError - if the actual Hand is not sameColour.
	 */
	public HandAssert isSameColour() {
		// check that actual Hand we want to make assertions on is not null.
		isNotNull();

		// we overrides the default error message with a more explicit one
		String errorMessage = format("Expected actual Hand to be sameColour but was not.", actual);

		// check
		if (!actual.isSameColour())
			throw new AssertionError(errorMessage);

		// return the current assertion for method chaining
		return this;
	}

	/**
	 * Verifies that the actual Hand is not sameColour.
	 * @return this assertion object.
	 * @throws AssertionError - if the actual Hand is sameColour.
	 */
	public HandAssert isNotSameColour() {
		// check that actual Hand we want to make assertions on is not null.
		isNotNull();

		// we overrides the default error message with a more explicit one
		String errorMessage = format("Expected actual Hand not to be sameColour but was.", actual);

		// check
		if (actual.isSameColour())
			throw new AssertionError(errorMessage);

		// return the current assertion for method chaining
		return this;
	}
	
	private boolean isEqual(Card card1, Card card2) {
		return card1.getColourValue() == card2.getColourValue() && card1.getFigureValue() == card2.getFigureValue();
	}

}
